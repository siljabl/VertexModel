from simulation.bind import VertexModel
from simulation.plot import plot, WindowClosedException
from simulation.init import movie_sh_fname

import pickle, subprocess, os, sys, traceback
import numpy as np
import matplotlib.pyplot as plt
from operator import itemgetter
from tempfile import mkdtemp

# PARAMETERS

seed = 0                                # random number generator seed

N = 24                                  # number of vertices in each dimension

v0 = 0.75                               # self-propulsion velocity
taup = 5                                # self-propulsion persistence time

Lambda = 1                              # surface tension
V0 = 1                                  # reference volume of cells
Vth = 1.5*V0                            # threshold volume
A0 = (np.sqrt(3)*(V0**2)/2)**(1./3.)    # reference area of cells
stdV0 = 0.75                            # standard deviation of volume of cells
tauV = 200                              # inverse increase rate in V0 unit

# INITIALISATION

# vertex model object
vm = VertexModel(seed)                                  # initialise vertex model object
vm.initRegularTriangularLattice(size=N, hexagonArea=A0) # initialise periodic system

# forces
vm.addActiveBrownianForce("abp", v0, taup)      # centre active Brownian force
vm.addSurfaceForce("surface", Lambda, V0, tauV) # surface tension force
vm.vertexForces["surface"].volume = dict(map(   # set cell volume
    lambda i: (i, np.random.uniform(low=V0 - stdV0, high=V0 + stdV0)),
    vm.vertexForces["surface"].volume))

# SIMULATION


